# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'calculator.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets

start = "0"
first = 0
second = 0
operation = ""
count_point = 0
mem = 0
new = 0
class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(213, 343)
        MainWindow.setSizeIncrement(QtCore.QSize(0, 0))
        MainWindow.setBaseSize(QtCore.QSize(0, 0))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setBaseSize(QtCore.QSize(0, 0))
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(10, 10, 191, 51))
        font = QtGui.QFont()
        font.setPointSize(28)
        self.label.setFont(font)
        self.label.setToolTipDuration(-1)
        self.label.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.label.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.label.setFrameShadow(QtWidgets.QFrame.Plain)
        self.label.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label.setObjectName("label")
        self.memoclear = QtWidgets.QPushButton(self.centralwidget, clicked = lambda: self.memory("MC"))
        self.memoclear.setGeometry(QtCore.QRect(10, 70, 31, 31))
        self.memoclear.setObjectName("memoclear")
        self.memorecall = QtWidgets.QPushButton(self.centralwidget, clicked = lambda: self.memory("MR"))
        self.memorecall.setGeometry(QtCore.QRect(50, 70, 31, 31))
        self.memorecall.setObjectName("memorecall")
        self.memosave = QtWidgets.QPushButton(self.centralwidget, clicked = lambda: self.memory("MS"))
        self.memosave.setGeometry(QtCore.QRect(90, 70, 31, 31))
        self.memosave.setObjectName("memosave")
        self.addmemo = QtWidgets.QPushButton(self.centralwidget, clicked = lambda: self.memory("M+"))
        self.addmemo.setGeometry(QtCore.QRect(130, 70, 31, 31))
        self.addmemo.setObjectName("addmemo")
        self.minusmemo = QtWidgets.QPushButton(self.centralwidget, clicked = lambda: self.memory("M-"))
        self.minusmemo.setGeometry(QtCore.QRect(170, 70, 31, 31))
        self.minusmemo.setObjectName("minusmemo")
        self.goback = QtWidgets.QPushButton(self.centralwidget, clicked = lambda: self.press_it("GB"))
        self.goback.setGeometry(QtCore.QRect(10, 110, 31, 31))
        self.goback.setObjectName("goback")
        self.plusminus = QtWidgets.QPushButton(self.centralwidget, clicked = lambda: self.press_it("PM"))
        self.plusminus.setGeometry(QtCore.QRect(130, 110, 31, 31))
        self.plusminus.setObjectName("plusminus")
        self.squareroot = QtWidgets.QPushButton(self.centralwidget, clicked = lambda: self.square_it())
        self.squareroot.setGeometry(QtCore.QRect(170, 110, 31, 31))
        self.squareroot.setObjectName("squareroot")
        self.clearinput = QtWidgets.QPushButton(self.centralwidget, clicked = lambda: self.press_it("CE"))
        self.clearinput.setGeometry(QtCore.QRect(50, 110, 31, 31))
        self.clearinput.setObjectName("clearinput")
        self.clear = QtWidgets.QPushButton(self.centralwidget, clicked = lambda: self.press_it("C"))
        self.clear.setGeometry(QtCore.QRect(90, 110, 31, 31))
        self.clear.setObjectName("clear")
        self.seven = QtWidgets.QPushButton(self.centralwidget, clicked = lambda: self.press_it("7"))
        self.seven.setGeometry(QtCore.QRect(10, 150, 31, 31))
        self.seven.setObjectName("seven")
        self.divide = QtWidgets.QPushButton(self.centralwidget, clicked = lambda: self.divide_it())
        self.divide.setGeometry(QtCore.QRect(130, 150, 31, 31))
        self.divide.setObjectName("divide")
        self.percent = QtWidgets.QPushButton(self.centralwidget, clicked = lambda: self.press_it("%"))
        self.percent.setGeometry(QtCore.QRect(170, 150, 31, 31))
        self.percent.setObjectName("percent")
        self.eight = QtWidgets.QPushButton(self.centralwidget, clicked = lambda: self.press_it("8"))
        self.eight.setGeometry(QtCore.QRect(50, 150, 31, 31))
        self.eight.setObjectName("eight")
        self.nine = QtWidgets.QPushButton(self.centralwidget, clicked = lambda: self.press_it("9"))
        self.nine.setGeometry(QtCore.QRect(90, 150, 31, 31))
        self.nine.setObjectName("nine")
        self.four = QtWidgets.QPushButton(self.centralwidget, clicked = lambda: self.press_it("4"))
        self.four.setGeometry(QtCore.QRect(10, 190, 31, 31))
        self.four.setObjectName("four")
        self.multiply = QtWidgets.QPushButton(self.centralwidget, clicked = lambda: self.multiply_it())
        self.multiply.setGeometry(QtCore.QRect(130, 190, 31, 31))
        self.multiply.setObjectName("multiply")
        self.equal = QtWidgets.QPushButton(self.centralwidget, clicked = lambda: self.equal_to())
        self.equal.setGeometry(QtCore.QRect(170, 230, 31, 71))
        self.equal.setObjectName("equal")
        self.five = QtWidgets.QPushButton(self.centralwidget, clicked = lambda: self.press_it("5"))
        self.five.setGeometry(QtCore.QRect(50, 190, 31, 31))
        self.five.setObjectName("five")
        self.six = QtWidgets.QPushButton(self.centralwidget, clicked = lambda: self.press_it("6"))
        self.six.setGeometry(QtCore.QRect(90, 190, 31, 31))
        self.six.setObjectName("six")
        self.zero = QtWidgets.QPushButton(self.centralwidget, clicked = lambda: self.press_it("0"))
        self.zero.setGeometry(QtCore.QRect(10, 270, 71, 31))
        self.zero.setObjectName("zero")
        self.add = QtWidgets.QPushButton(self.centralwidget, clicked = lambda: self.add_it())
        self.add.setGeometry(QtCore.QRect(130, 270, 31, 31))
        self.add.setObjectName("add")
        self.point = QtWidgets.QPushButton(self.centralwidget, clicked = lambda: self.press_it("."))
        self.point.setGeometry(QtCore.QRect(90, 270, 31, 31))
        self.point.setObjectName("point")
        self.two = QtWidgets.QPushButton(self.centralwidget, clicked = lambda: self.press_it("2"))
        self.two.setGeometry(QtCore.QRect(50, 230, 31, 31))
        self.two.setObjectName("two")
        self.one = QtWidgets.QPushButton(self.centralwidget, clicked = lambda: self.press_it("1"))
        self.one.setGeometry(QtCore.QRect(10, 230, 31, 31))
        self.one.setObjectName("one")
        self.minus = QtWidgets.QPushButton(self.centralwidget, clicked = lambda: self.minus_it())
        self.minus.setGeometry(QtCore.QRect(130, 230, 31, 31))
        self.minus.setObjectName("minus")
        self.three = QtWidgets.QPushButton(self.centralwidget, clicked = lambda: self.press_it("3"))
        self.three.setGeometry(QtCore.QRect(90, 230, 31, 31))
        self.three.setObjectName("three")
        self.oneover = QtWidgets.QPushButton(self.centralwidget, clicked = lambda: self.press_it("OO"))
        self.oneover.setGeometry(QtCore.QRect(170, 190, 31, 31))
        self.oneover.setObjectName("oneover")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 213, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
    def press_it(self, pressed):
        global start
        global first
        global second
        global count_point
        global new
        if pressed == "C":
            start = "0"
            first = 0
            self.label.setText("%.9s" %start)
        elif pressed == "CE":
            start = "0"
            second = 0
            self.label.setText("%.9s" %start)
        elif pressed == "PM":
            start = str(float(start)*(-1))
            self.label.setText("%.9s" %start)
        elif pressed == "GB":
            if len(start) > 1:
                start = start[:-1]
                self.label.setText("%.9s" %start)
            elif len(start) == 1:
                start = "0"
                self.label.setText("%.9s" %start)
        elif pressed == "OO":
            if start != "0":
                start = str(1/float(start))
                self.label.setText("%.9s" %start)
        elif pressed == ".":
            if count_point == 0:
                start += pressed
                self.label.setText("%.9s" %start)
                count_point += 1
        elif pressed == "%":
            new = float(start)/100
            if operation == "+":
                start = float(start)*(1+new)
            elif operation == "-":
                start = float(start)*(1-new)
            elif operation == "*":
                start = float(start)*new
            elif operation == "/":
                start = float(start)/new
            self.label.setText("%.9s" %start)
        elif start == "0":
            start = pressed
            self.label.setText("%.9s" %start)
        else:
            start += pressed
            self.label.setText("%.9s" %start)
    def add_it(self):
        global start
        global first
        global operation
        global count_point
        count_point = 0
        first = float(start)
        operation = "+"
        self.label.setText("")
        start = "0"
    def minus_it(self):
        global start
        global first
        global operation
        global count_point
        count_point = 0
        first = float(start)
        operation = "-"
        self.label.setText("")
        start = "0"
    def multiply_it(self):
        global start
        global first
        global operation
        global count_point
        count_point = 0
        first = float(start)
        operation = "*"
        self.label.setText("")
        start = "0"
    def divide_it(self):
        global start
        global first
        global operation
        global count_point
        count_point = 0
        first = float(start)
        operation = "/"
        self.label.setText("")
        start = "0"
    def equal_to(self):
        global start
        global first
        global second
        global count_point
        second = float(start)
        if operation == "+":
            self.label.setText("%.9s" %str(first+second))
            start = "0"
            first = 0
            second = 0
            count_point = 0
        elif operation == "-":
            self.label.setText("%.9s" %str(first-second))
            start = "0"
            first = 0
            second = 0
            count_point = 0
        elif operation == "*":
            self.label.setText("%.9s" %str(first*second))
            start = "0"
            first = 0
            second = 0
            count_point = 0
        elif operation == "/" and second != 0:
            self.label.setText("%.9s" %str(first/second))
            start = "0"
            first = 0
            second = 0
            count_point = 0
    def square_it(self):
        global start
        if float(start) >= 0:
            self.label.setText("%.9s" %str(float(start)**0.5))
            start = "0"
            count_point = 0
    def memory(self, memcom):
        global mem
        global start
        if memcom == "M+":
            mem += float(start)
            start = ""
            self.label.setText(start)
        elif memcom == "M-":
            mem -= float(start)
            start = ""
            self.label.setText(start)
        elif memcom == "MC":
            mem = 0
        elif memcom == "MR":
            self.label.setText(str(mem))
        elif memcom == "MS":
            mem = mem        

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Calculator"))
        self.label.setText(_translate("MainWindow", "0"))
        self.memoclear.setText(_translate("MainWindow", "MC"))
        self.memorecall.setText(_translate("MainWindow", "MR"))
        self.memosave.setText(_translate("MainWindow", "MS"))
        self.addmemo.setText(_translate("MainWindow", "M+"))
        self.minusmemo.setText(_translate("MainWindow", "M-"))
        self.goback.setText(_translate("MainWindow", "<--"))
        self.plusminus.setText(_translate("MainWindow", "+/-"))
        self.squareroot.setText(_translate("MainWindow", "sqrt"))
        self.clearinput.setText(_translate("MainWindow", "CE"))
        self.clear.setText(_translate("MainWindow", "C"))
        self.seven.setText(_translate("MainWindow", "7"))
        self.divide.setText(_translate("MainWindow", "/"))
        self.percent.setText(_translate("MainWindow", "%"))
        self.eight.setText(_translate("MainWindow", "8"))
        self.nine.setText(_translate("MainWindow", "9"))
        self.four.setText(_translate("MainWindow", "4"))
        self.multiply.setText(_translate("MainWindow", "*"))
        self.equal.setText(_translate("MainWindow", "="))
        self.five.setText(_translate("MainWindow", "5"))
        self.six.setText(_translate("MainWindow", "6"))
        self.zero.setText(_translate("MainWindow", "0"))
        self.add.setText(_translate("MainWindow", "+"))
        self.point.setText(_translate("MainWindow", "."))
        self.two.setText(_translate("MainWindow", "2"))
        self.one.setText(_translate("MainWindow", "1"))
        self.minus.setText(_translate("MainWindow", "-"))
        self.three.setText(_translate("MainWindow", "3"))
        self.oneover.setText(_translate("MainWindow", "1/x"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
